name: 'Snake GitHub Contribution Graph'
description: 'Generate an animated SVG showing a snake eating GitHub contributions using advanced pathfinding algorithms'
author: 'diverger'

branding:
  icon: 'activity'
  color: 'green'

inputs:
  github_user_name:
    description: 'GitHub username'
    required: true
  github_token:
    description: 'GitHub token used to fetch the contribution calendar. Defaults to the action token if empty.'
    required: false
    default: ${{ github.token }}
  outputs:
    description: |
      List of SVG files to generate.
      One file per line. Each output can be customized with options as query string.

      Supported query string options:
      - palette:      A preset of color, one of [github, github-dark, github-light]
      - color_snake:  Color of the snake
      - color_dots:   Comma separated list of dots color.
                      The first one is 0 contribution, then it goes from the low contribution to the highest.
                      Exactly 5 colors are expected.

      Example:
        outputs: |
          dark.svg?palette=github-dark&color_snake=blue
          light.svg?color_snake=#7845ab
          ocean.svg?color_snake=orange&color_dots=#bfd6f6,#8dbdff,#64a1f4,#4b91f1,#3c7dd9
    required: false
    default: 'snake.svg'
  show_contribution_counter:
    description: 'Show contribution counter with progress bar (requires counter_displays to be set)'
    required: false
    default: 'false'
  hide_progress_bar:
    description: 'Hide the progress bar while keeping counters/sprites visible. Progress bar remains in DOM for positioning reference.'
    required: false
    default: 'false'
  counter_displays:
    description: |
      JSON array of multiple counter displays. Each display can have different position, text, colors, and images.

      Example with multiple positions:
        [{
          "position": "top-left",
          "text": "GitHub Contributions",
          "color": "#58a6ff",
          "fontSize": 16
        }, {
          "position": "top-right",
          "prefix": "Total: ",
          "showCount": true,
          "showPercentage": false,
          "color": "#7ee787"
        }, {
          "position": "bottom-left",
          "prefix": "ðŸ”¥ ",
          "suffix": " streak",
          "color": "#ffa657"
        }, {
          "position": "follow",
          "prefix": "ðŸŽ¯ ",
          "suffix": " commits",
          "color": "#39d353"
        }]

      Example with image:
        [{
          "position": "follow",
          "image": {
            "url": "data:image/png;base64,...",
            "width": 32,
            "height": 32
          }
        }]

      Example with sprite sheet (synced with progress):
        [{
          "position": "follow",
          "mode": "sync",
          "images": [{
            "url": "https://example.com/sprite.png",
            "width": 128,
            "height": 32,
            "anchor": "center",
            "sprite": {
              "frames": 4,
              "layout": "horizontal"
            }
          }]
        }]

      Example with sprite sheet (independent loop):
        [{
          "position": "follow",
          "mode": "loop",
          "images": [{
            "url": "https://example.com/sprite.png",
            "width": 128,
            "height": 32,
            "anchor": "bottom-center",
            "offsetY": -2,
            "sprite": {
              "frames": 4,
              "layout": "horizontal",
              "fps": 10
            }
          }]
        }]

      Example with level-based sprite switching:
        [{
          "position": "follow",
          "mode": "level",
          "images": [{
            "urlFolder": "assets",
            "framePattern": "L{n}.png",
            "width": 64,
            "height": 86,
            "sprite": {
              "contributionLevels": 5,
              "framesPerLevel": 8,
              "frameWidth": 48,
              "frameHeight": 64,
              "useSpriteSheetPerLevel": true
            }
          }]
        }]

      Note: When useSpriteSheetPerLevel is true, each file (L0.png, L1.png, etc.) is itself
      a sprite sheet containing multiple frames for that contribution level. The frameWidth
      and frameHeight specify the dimensions of each individual frame within those sprite sheets.

      Fields:
      - position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'follow' | 'free' (required)
        - 'top-left': Fixed at left edge, above progress bar
        - 'top-right': Right-aligned, above progress bar, clamped to canvas width to prevent overflow
        - 'bottom-left': Fixed at left edge, below progress bar
        - 'bottom-right': Right-aligned, below progress bar, clamped to canvas width to prevent overflow
        - 'follow': Follows progress bar head (on the same line)
        - 'free': Moves uniformly from left edge to right edge based on progress over time
      - mode: 'sync' | 'loop' | 'level' - Animation mode for all images in this display (default: 'sync')
        - 'sync': Frame changes synchronized with progress bar steps
        - 'loop': Independent looping animation (continuous)
        - 'level': Frame changes based on contribution level (0-4)
      - text: Fixed text to display (if set, count/percentage are ignored)
      - prefix, suffix: Text around count/percentage
      - showCount, showPercentage: Control what to display (default: both true)
      - fontSize, fontFamily, color: Text styling
      - fontWeight: 'normal', 'bold', or numeric (100-900)
      - fontStyle: 'normal' or 'italic'
      - images: Array of PNG images or sprite sheets
        Three modes supported:

        1. Single static image:
          - url: Image URL (data URI or external URL)

        2. Sprite sheet animation:
          - url: Sprite sheet URL
          - sprite: Configuration with frames, layout, etc.

        3. Multiple separate image files (GitHub workflows compatible):
          - urlFolder: Folder path containing numbered frames (e.g., 'images/character')
          - framePattern: Filename pattern (default: 'frame-{n}.png')
            Examples: 'frame-{n}.png', 'img_{n}.gif', 'sprite{n}.webp'
          - sprite: Configuration with frames count and animation mode

        For urlFolder mode, images should be named sequentially:
          - frame-0.png, frame-1.png, frame-2.png, ... (default pattern)
          - Or custom pattern like img_0.gif, img_1.gif, ...
        These files must exist in the repository or be generated before the action runs.

        Common fields for all modes:
        - width, height: Image dimensions in pixels
        - offsetY: Vertical offset from baseline in pixels (optional, default: 0)
        - anchor: Predefined anchor point for alignment (optional, default: 'bottom-center')
          - 'top-left', 'top-center', 'top-right'
          - 'center-left', 'center', 'center-right'
          - 'bottom-left', 'bottom-center', 'bottom-right'
          - Useful when frame size is larger than actual icon (e.g., 32x32 frame with 24x24 icon)
        - anchorX, anchorY: Custom anchor point (0-1 normalized, overrides anchor)
          - anchorX: 0=left, 0.5=center, 1=right
          - anchorY: 0=top, 0.5=center, 1=bottom
        - spacing: Horizontal spacing after the image in pixels (optional, default: 0)
          - Adds extra gap between image and adjacent text
          - Example: spacing: 8 adds 8 pixels gap after the image
        - sprite: Animation configuration (for modes 2 and 3)
          - frames: Number of animation frames (required)
          - frameWidth, frameHeight: Frame dimensions (sprite sheet mode only, auto-calculated if not provided)
          - layout: 'horizontal' or 'vertical' (sprite sheet mode only, default: horizontal)
          - fps: Frames per second for loop mode (e.g., 10)
          - duration: Animation duration in ms for loop mode (alternative to fps)
          - contributionLevels: Number of contribution levels for level mode (default: 5)
          - framesPerLevel: Frames per level for level mode (default: 1)
          - useSpriteSheetPerLevel: Use sprite sheet per level instead of separate files (level mode)
    required: false

outputs:
  svg_path:
    description: 'Path to the generated SVG file'
  moves_count:
    description: 'Total number of moves in the snake path'
  cells_eaten:
    description: 'Number of contribution cells consumed'

runs:
  using: 'docker'
  image: 'docker://ghcr.io/diverger/gh-magic-matrix-snake@sha256:5007bfbad13d64c95cc32aa83ab0f2c766d1e465b21e5e74603ac8baf0edded4'
